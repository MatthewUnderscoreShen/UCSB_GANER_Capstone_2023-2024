#!/usr/bin/env python3
import rospy
from std_msgs.msg import Int16
from drive_control.encoder import Encoder

class EncoderReader(object):

    def __init__(self):
        pins = rospy.get_param("/pins/encoder")
        topics = rospy.get_param("/topics")

        self.left_enc = Encoder(pins["left"]["A"], pins["left"]["B"])
        self.right_enc = Encoder(pins["right"]["A"], pins["right"]["B"])

        self.left_ticks_pub = rospy.Publisher(topics["enc_l"], Int16, queue_size=10)
        self.right_ticks_pub = rospy.Publisher(topics["enc_r"], Int16, queue_size=10)

        left_ticks = Int16()
        right_ticks = Int16()

        left_ticks.data = 0
        right_ticks.data = 0

        l_last = 0
        r_last = 0
        l_read = (0,0)
        r_read = (0,0)
        rate = rospy.Rate(1000)
        while not rospy.is_shutdown():
            l_read = self.left_enc.read()
            r_read = self.right_enc.read()

            if l_read[0] and not l_last:    # if goes from low to high
                left_ticks.data += 1 if l_read[1] else -1
            if r_read[0] and not r_last:
                right_ticks.data += 1 if r_read[1] else -1

            self.left_ticks_pub.publish(left_ticks)
            self.right_ticks_pub.publish(right_ticks)

            l_last = l_read[0]
            r_last = r_read[0]

            rate.sleep()

if __name__ == "__main__":
    rospy.init_node("encoder_read")

    encoder_reader = EncoderReader()

    rospy.loginfo("Encoder node started")
    rospy.spin()