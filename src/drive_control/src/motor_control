#!/usr/bin/env python3
import rospy
import time
import numpy as np
import operator as op
from scipy.spatial.transform import Rotation as R
from drive_control.motor import Motor
from std_msgs.msg import String
from std_msgs.msg import Int16MultiArray
from sensor_msgs.msg import Joy
from sensor_msgs.msg import Range
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Quaternion
from nav_msgs.msg import Odometry

class MotorController(object):

    # A few functions here follow a format where you pass a function and some args
    # These are used to allow for multiple different uses of a function and to
    # facilitate the way I've written sequential commands. 

    def __init__(self):
        pins = rospy.get_param("/pins")
        topics = rospy.get_param("/topics")
        hz = 100
        self.min_pow = 0.3
        self.align_rate = rospy.Rate(1)
        self.align_rate_f = rospy.Rate(4)
        self.align_rate_b = rospy.Rate(2)
        self.check_rate = rospy.Rate(10)
        self.euler = [0.0, 0.0, 0.0]    # x, y, z
        self.dists = [0.0, 0.0, 0.0, 0.0, 0.0]  # front, left, right, back, arm

        self.left_motor = Motor(pins["pwm"]["left"], pins["dir"]["left"], hz, False)
        self.right_motor = Motor(pins["pwm"]["right"], pins["dir"]["right"], hz, False)

        self.drive_pub = rospy.Publisher(topics["drive_out"], String, queue_size=10)
        self.task_pub = rospy.Publisher(topics["task"], String, queue_size=10)
        rospy.Subscriber(topics["drive_in"], String, self.drive_callback)
        rospy.Subscriber(topics["is_on"], Int16MultiArray, self.is_on_callback)
        rospy.Subscriber(topics["joy"], Joy, self.joy_callback)
        rospy.Subscriber("/front_distance", Range, self.front_dist_callback)
        rospy.Subscriber("/left_distance", Range, self.left_dist_callback)
        rospy.Subscriber("/right_distance", Range, self.right_dist_callback)
        rospy.Subscriber("/back_distance", Range, self.back_dist_callback)
        rospy.Subscriber("/arm_distance", Range, self.arm_dist_callback)
        rospy.Subscriber("/imu_data", Imu, self.imu_callback)

        self.test_pub = rospy.Publisher("test", String, queue_size=10)

        self.is_teleop = False

        self.auto_cmds = {
            "drive forward": (self.drive_open, (0.67,0.7)),
            "drive backward": (self.drive_open, (-0.67,-0.7)),
            "stair up": (self.drive_open, (0.25,0.25)),
            "stair down": (self.drive_open, (-0.38,0.4)),
            "stop": (self.drive_open, (0,0)),
            "door to stairs": (self.door2stair, (0)),
            "find stairs": (self.straight_until, 
                            (0.4, self.check_walls,
                             ((1, ), (op.le, ), (50, )),
                             self.pub_msg, (self.task_pub, String(), "Turn To Stair"),
                             self.check_walls, ((4, ), (op.ge, ), (17.5, )),
                             self.pub_msg, (self.task_pub, String(), "Test P"))),
            "turn to stair": (self.turn_until, (-0.11, np.deg2rad(175.0),
                                                self.pub_msg, (self.task_pub, String(), "To Stair Base"))),
            "to stair base": (self.straight_until,
                              (0.3, self.check_walls,
                               ((0, ), (op.le, ), (15.0, )),
                               self.pub_msg, (self.task_pub, String(), "Done"),
                               self.check_walls, ((0, ), (op.le, ), (4.0, )),
                               self.pub_msg, (self.task_pub, String(), "Test P"))),
            "align stairs": (self.align_on_stairs, (1)),
            "mount stairs": (self.straight_until,
                             (0.35, self.check_imu,
                              ((1,),),
                              )),
            "upstairs straight": (self.straight_until, 
                                  (0.45, self.check_walls,  # spd, stop_cond_func
                                   ((0, ), (op.le, ), (15.0, )),  # stop_conds
                                   self.pub_msg, (self.task_pub, String(), "Upstairs Turn 1"),  # stop_func # stop_args
                                   self.check_walls, ((0,), (op.le,), (10.0,)),    # fail_cond_func, fail_conds
                                   self.pub_msg, (self.task_pub, String(), "Test P"))), # fail func, fail_args(empty)
            "turn 90deg": (self.turn_until, (-0.25, np.deg2rad(90), self.stop, [])),
            "upstairs turn 90": (self.turn_until, 
                                 (0.15, np.deg2rad(90), self.pub_msg, 
                                  (self.task_pub, String(), "Upstairs Straight 2"))),
            "upstairs straight 2": (self.straight_until, 
                                  (0.45, self.check_walls,  # spd, stop_cond_func
                                   ((0, ), (op.le, ), (17.5, )),  # stop_conds
                                   self.pub_msg, (self.task_pub, String(), "Upstairs Turn 2"),  # stop_func # stop_args
                                   self.check_walls, ((0,), (op.le,), (10.0,)),    # fail_cond_func, fail_conds
                                   self.pub_msg, (self.task_pub, String(), "Test P"))), # fail func, fail_args(empty)
            "upstairs turn 90 2": (self.turn_until, 
                                 (0.175, 0.0, self.pub_msg, 
                                  (self.task_pub, String(), "Upstairs Look Down"))),
            "upstairs straight 3": (self.straight_until, 
                                  (0.45, self.check_walls,  # spd, stop_cond_func
                                   ((4, ), (op.ge, ), (17.5, )),  # stop_conds
                                   self.pub_msg, (self.task_pub, String(), "Done"),  # stop_func # stop_args
                                   self.check_walls, ((3,), (op.eq,), (1.0,)),    # fail_cond_func, fail_conds
                                   self.pub_msg, (self.task_pub, String(), "Test P"))), # fail func, fail_args(empty)
            }
        
    def pub_msg(self, content):
        content[1].data = content[2]
        content[0].publish(content[1])
    
    def drive_callback(self, data):
        cmd = self.auto_cmds[data.data]
        cmd[0](cmd[1])
        return  # auto commands

    def is_on_callback(self, data):
        self.is_teleop = data.data[0]
    
    def joy_callback(self, data):
        if not self.is_teleop:
            return
        self.drive_open((np.power(data.axes[1],3), np.power(data.axes[4],3)))
    
    def front_dist_callback(self, data):
        self.dists[0] = data.range
    
    def left_dist_callback(self, data):
        self.dists[1] = data.range

    def right_dist_callback(self, data):
        self.dists[2] = data.range
    
    def back_dist_callback(self, data):
        self.dists[3] = data.range

    def arm_dist_callback(self, data):
        self.dists[4] = data.range

    def imu_callback(self, data):
        # [-pi pi]
        r = R.from_quat([data.orientation.x, data.orientation.y, data.orientation.z, data.orientation.w])
        self.euler = r.as_euler('xyz')
        #self.test_pub.publish(str(self.dists))
        self.test_pub.publish(str(self.euler))
        return
    
    def turn_until(self, args): # (spd, stop_angle, stop_func, stop_args)
        # spd(- turns left), stopping angle in radians. Turns to absolute angle.
        # function can be used as a wall avoidance safety measure by passing
        # self.stop into stop_func, but is also used as part of a chain of
        # commands.
        self.drive_open((args[0], -1*args[0]))
        while not abs(self.euler[2] - args[1]) < 0.2:
            self.drive_pub.publish(str(abs(self.euler[2]-args[1])))
            self.check_rate.sleep()
        self.stop()
        if not args[3]:
            args[2]()
        else:
            args[2](args[3])
        return

    def straight_until(self, args): 
        # (spd, stop_cond_func, (stop_conds), stop_func, stop_args, 
        # fail_cond_func, fail_cond_args, fail_func, fail_args)
        ang = self.euler[2]
        self.drive_open((args[0], args[0]))
        while not args[1](args[2]):
            # correction in case robot swerves for whatever reason
            # like wheels going different speeds
            self.drive_open((args[0]+0.0*(np.sin(self.euler[2])-np.sin(ang))+0.0*max(0,7.5-self.dists[1]), 
                             args[0]-0.0*(np.sin(self.euler[2])-np.sin(ang))+0.0*max(0,7.5-self.dists[2])))
            if args[5](args[6]):    # Some kind of fail function
                self.stop()
                if not args[8]:
                    args[7]()
                else:
                    args[7](args[8])
                return
            self.check_rate.sleep()
        self.stop()
        if not args[4]:
            args[3]()
        else:
            args[3](args[4])
        return
    
    def align_on_stairs(self, cycles):
        # assumes pointed directly at the stairs, at its base
        # Movement: left forward, right forward, back, pray, repeat
        for _ in range(cycles):
            self.start_and_stop((0.25, 0.25), 0.25)
            self.start_and_stop((0.25, 0.25), 0.25)
            self.start_and_stop((0.25, 0.25), 0.25)
            self.start_and_stop((-0.9, -0.9), 0.4)
        return
    
    def start_and_stop(self, pow, t):
        # the drive_open function has a anti-stall measure put in, but
        # as a janky exploit for aligning on the stairs we want a little stalling
        # It should be an issue since it's not for long
        self.left_motor.set_vel(pow[0])
        self.right_motor.set_vel(pow[1])
        time.sleep(t)
        self.stop()
        time.sleep(t)

    def door2stair(self, hah): # hah does nothing. After the robot exits the first door,
        # it should stop when it no longer sees the stairs.
        self.drive_open((0.7, 0.7))
        time.sleep(2.5)
        self.turn_until((-0.11, np.deg2rad(85.0), self.pub_msg, (self.task_pub, String(), "Find Stairs")))

    def drive_open(self, pow):  # pow takes a tuple with left and right power (-1 to 1)
        if pow[0] != 0:
            self.left_motor.set_vel(np.sign(pow[0])*max(self.min_pow, np.abs(pow[0])))
        else:
            self.left_motor.stop()
        if pow[1] != 0:
            self.right_motor.set_vel(np.sign(pow[1])*max(self.min_pow, np.abs(pow[1])))
        else:
            self.right_motor.stop()

    def stop(self):
        self.left_motor.stop()
        self.right_motor.stop()
        self.drive_pub.publish(String("Left: " + str(0.0) + "   Right: " + str(0.0)))

    def check_walls(self, args):   # ((front, left, etc(index)), (operators), (conditions))
        # Function checks all passed conditions and only returns True of all are True.
        
        for i in range(len(args[0])):
            if self.dists[args[0][i]] < 0:
                self.dists[args[0][i]] = float('inf')
            if not args[1][i](self.dists[args[0][i]], args[2][i]):
                # distance sensor returns -1 if it times out, so we need a catch for that
                return False
        return True
    
    def check_imu(self, args): # ((imu index, operator, condition), )
        for c in args:
            if not c[1](self.dists[c[0]], c[2]):
                return False
        return True
    
    def is_near(self, a, b):    # numbers are for distance sensors
        return abs(a - b) < 1.0

if __name__ == "__main__":
    rospy.init_node("motor_control")

    motor_controller = MotorController()

    rospy.on_shutdown(motor_controller.stop)
    rospy.loginfo("Motor controller node started")
    rospy.spin()