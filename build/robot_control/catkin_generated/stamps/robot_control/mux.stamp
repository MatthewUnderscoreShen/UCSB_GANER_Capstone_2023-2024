#!/ubuntu/bin/env python
import rospy
import numpy as np
import time
from std_msgs.msg import String
from std_msgs.msg import Int16MultiArray
from std_msgs.msg import Float32MultiArray

class Mux(object):

    def __init__(self):
        topics = rospy.get_param("/topics")
        self.drive_pub = rospy.Publisher(topics["drive_in"], String, queue_size=10)
        self.arm_pub = rospy.Publisher(topics["arm_in"], Float32MultiArray, queue_size=10)
        self.is_pub = rospy.Publisher(topics["is_on"], Int16MultiArray, queue_size=10)
        rospy.Subscriber(topics["task"], String, self.task_callback)
        # is_this_on : [is_teleop, is_camera_looking, is_distance]

        self.commands = {"Teleop": (self.pub_msg, (self.is_pub, Int16MultiArray(), [1,0])),
                         "Auto": (self.pub_msg, (self.is_pub, Int16MultiArray(), [0,0])),
                         "Upstairs": {"func": self.pub_sequence, 
                                      "content": {"funcs": [], "type": Int16MultiArray(), 
                                                  "data": [""]}},
                         "Test P": (self.pub_msg, (self.drive_pub, String(), "stop")),
                         "Test L": (self.pub_msg, (self.drive_pub, String(), "drive backward")),
                         "Test R": (self.pub_msg, (self.drive_pub, String(), "drive forward"))
                        }

    def task_callback(self, data):
        stuff = self.commands[data.data]
        stuff[0](stuff[1])
    
    def pub_sequence(self, content):
        #for i in 
        return

    def pub_msg(self, content): # takes pub reference, msg type, msg
        content[1].data = content[2]
        content[0].publish(content[1])

    def toggle(self, is_on):
        return


if __name__ == '__main__':
    rospy.init_node("mux")

    mux = Mux()

    rospy.loginfo("Mux node started")
    rospy.spin()