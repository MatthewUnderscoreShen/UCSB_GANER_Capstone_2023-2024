#!/usr/bin/env python3
import rospy
from std_msgs.msg import Float32MultiArray
from std_msgs.msg import Int16MultiArray
from sensor_msgs.msg import Joy
from drive_control.arm import Arm

class ArmController(object):

    def __init__(self):
        self.arm = Arm()
        # sub and pub setup
        self.topics = rospy.get_param("/topics")
        rospy.Subscriber(self.topics["arm_in"], Float32MultiArray, self.arm_callback)
        rospy.Subscriber(self.topics["is_on"], Int16MultiArray, self.is_on_callback)
        rospy.Subscriber(self.topics["joy"], Joy, self.joy_callback)
        self.arm_pub = rospy.Publisher(self.topics["arm_out"], Float32MultiArray, queue_size=10)

        # teleop boolean
        self.is_teleop = False
        # variables for ignoring joy_callback for analog joystick inputs
        self.curr_pos = [400, 415, 500, 480, 500] # arm up default
        self.last_pos = self.curr_pos.copy()
        self.last_btn = (0 for _ in range(13))
        self.last_axes = (0.0 for _ in range(8))

        # Unfortunately the xarm module is trash and has an error when 
        # reading servo positions so im just gonna leave this here in 
        # case it gets fixed
        # For now I publish the output to arm rather than reading from the arm
        #rate = rospy.Rate(10)
        self.msg = Float32MultiArray()
        #while not rospy.is_shutdown():
            #msg.data = self.arm.get_pos()
            #self.arm_pub.publish(msg)

        self.set_set()

        self.commands = [self.set_arm, self.set_arm, self.set_arm, self.set_arm,    # X O T S
                         self.set_arm, self.set_arm, self.set_arm, self.set_arm,    # LB RB LT RT
                         self.do_nothing, self.do_nothing,                          # Share, Options
                         self.set_arm, self.do_nothing, self.do_nothing,            # PS4, LJ, RJ
                         self.set_arm, self.set_arm                                 # dpad LR, dpad UD
                        ]
    
    def arm_callback(self, data):
        # float32 array with angle values
        return  # disabled for now
        self.arm.set_pos(data.data)

    def is_on_callback(self, data):
        self.is_teleop = data.data[0]
    
    def joy_callback(self, data):
        # It's a bit of a mess
        if not self.is_teleop or (data.buttons == self.last_btn and data.axes[6:] == self.last_axes[6:]):
            # only run if teleop on and if the buttons have changed
            return
        
        self.set_set()
        
        for i in range(13):
            if data.buttons[i]:
                self.commands[i](self.setpoints[i])
        for i in range(6,8):
            if data.axes[i] != 0:
                self.commands[i+7](self.setpoints[i+(7 if data.axes[i] > 0 else 9)])
        
        self.arm.set_pos(self.curr_pos)
        self.msg.data = self.curr_pos.copy()
        self.arm_pub.publish(self.msg)  # publish the output

        self.last_pos = self.curr_pos.copy()
        self.last_axes = data.axes
        self.last_btn = data.buttons

    def set_arm(self, pos):
        self.curr_pos = pos.copy()
    
    def do_nothing(self, data):
        return
    
    def set_set(self):
        # Claw, Claw rotate, top link, middle link, bottom link
        self.setpoints = (  [400, 415, 500, 480, 800],     # flat (for climbing)
                            [400, 415, 500, 750, 500],     # link 1 up, link 2 bent (pointing forward)
                            [400, 415, 500, 480, 500],     # arm up
                            [400, 415, 500, 320, 700],     # start climb start (bottom 45 forward, middle 45 back)
                            [(self.last_pos[i] + (-40 if i == 3 else 0)) for i in range(5)],    # middle up 10deg (40 ticks)
                            [(self.last_pos[i] + (-40 if i == 2 else 0)) for i in range(5)],    # top up 10deg
                            [(self.last_pos[i] + (40 if i == 3 else 0)) for i in range(5)],     # middle down 10deg
                            [(self.last_pos[i] + (40 if i == 2 else 0)) for i in range(5)],     # top down 10deg
                            0, 0, 
                            [400 if self.last_pos[0] > 550 else 750] + self.last_pos[1:],   # toggle claw
                            0, 0,
                            [(self.last_pos[i] + (-120 if i == 1 else 0)) for i in range(5)],    # claw 30deg CCW
                            [(self.last_pos[i] + (-20 if i == 4 else 0)) for i in range(5)],    # bottom down 5deg
                            [(self.last_pos[i] + (120 if i == 1 else 0)) for i in range(5)],   # claw 30deg CW
                            [(self.last_pos[i] + (20 if i == 4 else 0)) for i in range(5)],     # bottom up 5deg
                         )

if __name__ == "__main__":
    rospy.init_node("arm_control")

    arm_controller = ArmController()

    rospy.loginfo("Arm node started")
    rospy.spin()